modelling_feature_details <- data.frame(name= colnames(clean_client_db)) %>%
left_join(feature_details, by="name") %>%
left_join(select(numeric_summary, -fullname), by="name") %>%
left_join(select(discrete_summary, -fullname), by="name")
modelling_feature_details$vartype <- case_when(
modelling_feature_details$name == "hascard" ~ "response",
modelling_feature_details$name %in% numeric_summary$name ~ "numeric",
modelling_feature_details$name %in% discrete_summary$name ~ "discrete",
TRUE ~ "id"
)
#Take the final record for each customer
cust_final <- filter(full_client_database, SU_CURRENT_RECORD_IND =="Y") %>%
group_by(ID) %>%
filter(recordID == min(recordID))
#However, as not all IDs have a current record flag, we'll need to recover the record with the most recent date for those missing from the above
cust_last_date <- subset(full_client_database, !(full_client_database$ID %in%   cust_final$ID))%>%
group_by(ID) %>%
filter(fiscalwdate == max(fiscalwdate)) %>%
filter(recordID == min(recordID))
#And then we'll add those together
client_db <- filter(full_client_database, recordID %in% c(cust_final$recordID, cust_last_date$recordID) ) %>% select(- removelist)
#Here is our
cust_data <- full_client_database %>%
group_by(ID) %>%
dplyr::summarise(
spendavg = sum(AVERAGE_SPEND)/n(),
distinct_regions_per_record = n_distinct(REGION)/n(),
device_cap_variable = as.factor(n_distinct(HA_DEVICE_CAPABILITY)>1),
activity_change = as.factor(n_distinct(ACTIVE_ON_BASE)>1)
)
cust_data_per_date <- full_client_database %>%
group_by(ID, fiscalwdate) %>%
dplyr::summarise(
regions = n_distinct(REGION), capab = n_distinct(HA_DEVICE_CAPABILITY)) %>%
ungroup() %>%
group_by(ID) %>%
dplyr::summarise(regions_at_once = as.factor(max(regions) >1),
capab_at_once = as.factor(max(capab) >1))
client_db <- left_join(client_db, cust_data, by= "ID") %>%
left_join(cust_data_per_date)
nuts3_defs <- read.csv("nuts3_defs.csv")
nuts3_data <- read.csv("nuts3_data.csv") %>%
left_join(nuts3_defs, by="NUTS3")
nuts_stat_vars <- colnames(nuts3_data)[!(colnames(nuts3_data)  %in% c("REGION", "NUTS3") )]
full_client_database_nuts <- left_join(full_client_database,nuts3_data, by="REGION")
nuts_plot <- ggplot(full_client_database_nuts, aes(x=hascard, fill=NUTS3)) +
geom_bar(position = "fill")+
scale_fill_brewer(palette = "Set1", name="NUTS3 Region")+
theme_bw()+
ylab("Value") +
xlab("Card Ownership")+
theme(plot.background = element_rect(fill = "transparent",colour = "transparent"))
#Creating lists of the names and positions of our numeric columns
numeric_cols_list <- colnames(client_db)[sapply(client_db, is.numeric)]
#Creating lists of the names and positions of our discrete columns
factor_cols_list <- colnames(client_db)[sapply(client_db, is.factor)]
factor_colnums <- (1:length(factor_cols))[sapply(client_db, is.factor)]
#This list of full variable names will be used for creating plots with prettier names
variable_names <- list(
"ID" = "Customer ID",
"SU_CURRENT_RECORD_IND"  = "Indicator of latest record",
"PROFIT_CENTRE"  =  "Profit centre",
"ACTIVE_ON_BASE" = "Active / Not active",
"SU_STATUS_ID"   ="Customer status",
"SU_BIRTH_DATE"   ="Date of birth",
"SU_GENDER"      = "Gender",
"REGION"         = "County",
"AVERAGE_SPEND" = "Average Spend",
"CU_PAPERLESS_BILL_IND" = "Paperless billing",
"SU_FIXED_MOBILE_IND" = "Fixed or mobile line",
"MMS_INDICATOR"           = "MMS Indicator",
"INSURANCE_INDICATOR" = "Insurance Indicator",
"INSURANCE_AMOUNT" = "Insurance amount",
"PREFERRED_TOPUP_METHOD_DESC" = "Preferred topup method",
"BROADBAND_IND" =  "Broadband Indicator",
"TENURE_IN_MONTHS" = "Tenure (months)",
"HA_DEVICE_CAPABILITY"  = "Device capability",
"hascard"       = "Card owner",
"customer_age"    = "Age",
"fiscalwdate" = "Record Date \n(Beginning of fiscal week)",
"contract_length"   = "Contract length \n(months)",
"recordID" = "Record ID",
"contract" = "Bill or prepaid",
"spendavg" = "Average spend \n(all records)",
"distinct_regions_per_record" = "Regions \nper record",
"device_cap_variable" = "Device capacity\n change"   ,
"activity_change"  = "Change in \nrecorded activity"  ,
"capab_at_once" = "Multiple simultaneous\n device capabilities",
"regions_at_once" = "Multiple simultaneous\n addresses"
)
#This labeller function will be used many times for making nicer plots
variable_labeller <- function(variable,value){
return(variable_names[value])
}
#This dataframe is for easy joining to other dfs to add the fullnames
feature_details <- data.frame(name= as.character(names(variable_names)),
fullname = unlist(variable_names))
#Select the continuous variables only
num_client_db <- client_db %>%
column_to_rownames(var="recordID")%>%
select(one_of(numeric_cols_list))
#Of these, select only those with hascard==T
hascard_num <- subset(client_db, client_db$recordID %in% client_db$recordID[client_db$hascard])%>%
select(one_of(numeric_cols_list))
#And only those with hascard ==F
nocard_num <- subset(client_db, client_db$recordID %in% client_db$recordID[!client_db$hascard])%>%
select(one_of(numeric_cols_list))
#Now we bind the two sets back together
#By reformatting them in this way, we can easily use apply-family functions to compare between the two groups
hasnocard_num <- rbind(hascard_num, nocard_num)
#Perform a t-test for each variable, comparing between those with and without cards
t.result <-  apply(hasnocard_num, 2, function (x) t.test(x[1:nrow(hascard_num)],x[nrow(hascard_num)+1: nrow(hasnocard_num)]))
#Now we create a dataframe summarising the comparisons between those with and without cards
numeric_summary <- data.frame(name=colnames(hasnocard_num),
pvalhvn = unlist(lapply(t.result, function(x) x$p.value)),
hascard_mean = colMeans(hascard_num, na.rm=T),
hasnocard_mean = colMeans(nocard_num, na.rm=T),
hvnl2fc = foldchange2logratio(foldchange(colMeans(hascard_num, na.rm=T), colMeans(nocard_num, na.rm=T)))
) %>%
left_join(feature_details, by="name")
#This variable will be used to annotate plots with the p-value from the t-test
numeric_summary$desc_ttest <- paste0(numeric_summary$fullname, " \n p< ",round(numeric_summary$pvalhvn, 5) + 0.00001 )
#Now we create a df of our numeric variables in "long" format
numeric_client_db <- gather(client_db,key= "name", value= "val", numeric_cols_list) %>%
left_join(numeric_summary, by= "name")
#We will use facetting to create combined plots of all of these together, allowing a quick and easy overview
#First as a boxplot
(
plot2_eda_numeric_boxplots <-  ggplot(numeric_client_db, aes(x=hascard,y=val, fill=hascard)) +
geom_boxplot(outlier.shape = NA) +
theme_bw()+
scale_fill_brewer(palette = "Set1", name= "Card Owner")+
xlab("")+
ylab("Value")+
facet_wrap(~desc_ttest, scales = "free")+
ggtitle("Boxplots comparing continuous variable values in relation to card ownership", subtitle = "" )+
theme(plot.background = element_rect(fill = "transparent",colour = "transparent"))
)
#Then by plotting the mean of each
(
plot4_eda_numeric_mean_summary <-  ggplot(numeric_client_db, aes(x=hascard,y=val, colour=hascard)) +
stat_summary(fun.y="mean", size=5, geom="point")+
stat_summary(
fun.ymin = function(z) { quantile(z,0.10) },
fun.ymax = function(z) { quantile(z,0.90) })+
theme_bw()+
scale_colour_brewer(palette = "Set1", name= "Card Owner")+
xlab("")+
ylab("Value")+
facet_wrap(~desc_ttest, scales = "free")+
theme(plot.background = element_rect(fill = "transparent",colour = "transparent"))
)
dis_client_db <- client_db %>%
column_to_rownames(var="recordID")%>%
select(one_of(factor_cols_list))
hascard_dis <- subset(client_db, client_db$recordID %in% client_db$recordID[client_db$hascard])%>%
select(one_of(factor_cols_list))
nocard_dis <- subset(client_db, client_db$recordID %in% client_db$recordID[!client_db$hascard])%>%
select(one_of(factor_cols_list))
discrete_summary <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("name", "pval_fish_hvn", "oddsratio_hvn"))
for (i in 1:length(factor_cols_list)) {
hascard_vals <- as.vector(table(hascard_dis[,i]))
nocard_vals <- as.vector(table(nocard_dis[,i]))
fishmat <- matrix(c(hascard_vals, nocard_vals), nrow=2, ncol=length(hascard_vals), byrow=TRUE)
fish <- fisher.test(fishmat, simulate.p.value =T)
name= colnames(hascard_dis)[i]
pval <- fish$p.value
odds <- ifelse(!is.null(fish$estimate), fish$estimate, NA)
discrete_summary[nrow(discrete_summary) + 1,] = list(name, pval,odds)
}
discrete_summary <- left_join(discrete_summary, feature_details, by= "name")
discrete_summary$logodds <- log(discrete_summary$oddsratio_hvn)
discrete_summary$desc_fish <- paste0(discrete_summary$fullname, " \n p< ",round(discrete_summary$pval_fish_hvn, 5) + 0.00001 ,
ifelse(is.na(discrete_summary$logodds), "", paste0("\n log odds ratio: ", round(discrete_summary$logodds,2))))
discrete_client_db <- client_db %>%
gather(key= "name", value= "val", factor_cols_list) %>%
left_join(discrete_summary, by= "name")
plotlist <- list()
for (i in factor_cols_list){
discrete_var <- subset(discrete_client_db, discrete_client_db$name == i)
plotlist[[i]] <- ggplot(discrete_var, aes(x=hascard, fill=val)) +
geom_bar(position = "fill")+
scale_fill_brewer(palette = "Set1", name="")+
theme_bw()+
xlab(discrete_var$desc_fish[1])+
ylab("Value") +
theme(plot.background = element_rect(fill = "transparent",colour = "transparent"))
}
discrete_var <- subset(discrete_client_db, discrete_client_db$name == "REGION")
plotlist[["REGION"]] <-  ggplot(discrete_var, aes(x=hascard, fill=val)) +
geom_bar(position = "fill")+
guides(fill=F)+
theme_bw()+
xlab(paste0(discrete_var$desc_fish[1]))+
ylab("Value")
plot_eda_many_bars <- multiplot(plotlist=plotlist, cols=4)
#summary(client_db)
chosenvars <- c("ID", "ACTIVE_ON_BASE", "SU_GENDER", "AVERAGE_SPEND", "HA_DEVICE_CAPABILITY", "hascard", "customer_age", "contract",  "device_cap_variable", "activity_change", "regions_at_once")
chosen_client_db <- select(client_db, chosenvars)
chosen_feature_details <- data.frame(name= colnames(chosen_client_db)) %>%
left_join(feature_details, by="name") %>%
left_join(select(numeric_summary, -fullname), by="name") %>%
left_join(select(discrete_summary, -fullname), by="name")
chosen_feature_details$vartype <- case_when(
chosen_feature_details$name == "hascard" ~ "response",
chosen_feature_details$name %in% numeric_summary$name ~ "numeric",
chosen_feature_details$name %in% discrete_summary$name ~ "discrete",
TRUE ~ "id")
long_chosen_client_db <- chosen_client_db %>%
gather(key= "name", value= "val", -ID, -hascard) %>%
left_join(chosen_feature_details, by= "name")
levels(long_chosen_client_db$name)
plotlist <- list()
(
avsp <- ggplot(chosen_client_db, aes(x=hascard, y=AVERAGE_SPEND, fill=hascard)) +
geom_boxplot(outlier.shape = NA) +
theme_bw()+
scale_y_continuous(limits = c(0,50))+
scale_fill_brewer(palette = "Set1", name= "Card Owner", guide=F)+
xlab("")+
ylab("Average Spend")+
theme(plot.background = element_rect(fill = "transparent",colour = "transparent"))
)
(
age <- ggplot(chosen_client_db, aes(x=hascard, y=customer_age, fill=hascard)) +
geom_boxplot(outlier.shape = NA) +
theme_bw()+
#  scale_y_continuous(limits = c(0,50))+
scale_fill_brewer(palette = "Set1", name= "Card Owner")+
xlab("")+
ylab("Age")+
theme(plot.background = element_rect(fill = "transparent",colour = "transparent"))
)
multiplot_cont_chosen_multiplot(avsp, age, cols=2)
load("plots.rdata")
mx <- read.csv(paste("mx", "datastate.csv", sep=""))
md <- read.csv(paste("md", "datastate.csv", sep=""))
#mx2 <- subset(mx, mx$nid %in% md$nid.x)
mx2 <- subset(mx, duplicated(mx2$nid.x) == F) %>%
select(nid.x, Age.dpc.,dev05, Weight, shh_R2_spot)
library("ggplot2")
library("reshape2")
library("dplyr")
library("tidyr")
library("Rmisc")
#mx2 <- subset(mx, mx$nid %in% md$nid.x)
mx2 <- subset(mx, duplicated(mx2$nid.x) == F) %>%
select(nid.x, Age.dpc.,dev05, Weight, shh_R2_spot)
#mx2 <- subset(mx, mx$nid %in% md$nid.x)
mx2 <- subset(mx, duplicated(mx2$nid.x) == F) %>%
select(nid.x, Age.dpc.,dev05, Weight, shh_R2_spot)
#mx2 <- subset(mx, mx$nid %in% md$nid.x)
mx2 <- subset(mx, duplicated(mx$nid) == F) %>%
select(nid.x, Age.dpc.,dev05, Weight, shh_R2_spot)
#mx2 <- subset(mx, mx$nid %in% md$nid.x)
mx2 <- subset(mx, duplicated(mx$nid) == F) %>%
select(nid, Age.dpc.,dev05, Weight, shh_R2_spot)
#mx2 <- subset(mx, mx$nid %in% md$nid.x)
mx2 <- subset(mx, duplicated(mx$nid) == F) %>%
select(nid, Age,dev05, Weight, shh_R2_spot)
names(mx2)[names(mx2) == 'shh_R2_spot'] <- 'mx_shh_R2_spot'
md2 <- subset(md, md$nid.x %in% mx$nid.x)
md2 <- subset(md2, duplicated(md2$nid.x) == F) %>%
select(nid, Age,dev05, Weight, shh_R2_spot)
names(md2)[names(md2) == 'shh_R2_spot'] <- 'md_shh_R2_spot'
mdx <- left_join(md2, select(mx2, -Age.dpc., -Weight, -dev05), by="nid.x")
mdx <- left_join(md2, select(mx2, -Age, -Weight, -dev05), by="nid.x")
mdx <- left_join(md2, select(mx2, -Age, -Weight, -dev05), by="nid")
mdx$md_shh_l <- mdx$md_shh_R2_spot != 0
mdx$mx_shh_l <- mdx$mx_shh_R2_spot != 0
mdx3 <- subset(mdx, mdx$md_shh_l != mdx$mx_shh_l)
fisher.test(mdx$md_shh_l, mdx$mx_shh_l)
md2 <- subset(md, md$nid.x %in% mx$nid)
md2 <- subset(md2, duplicated(md2$nid) == F) %>%
select(nid, Age,dev05, Weight, shh_R2_spot)
names(md2)[names(md2) == 'shh_R2_spot'] <- 'md_shh_R2_spot'
mdx <- left_join(md2, select(mx2, -Age, -Weight, -dev05), by="nid")
md2 <- subset(md, md$nid %in% mx$nid)
md2 <- subset(md2, duplicated(md2$nid) == F) %>%
select(nid, Age,dev05, Weight, shh_R2_spot)
names(md2)[names(md2) == 'shh_R2_spot'] <- 'md_shh_R2_spot'
mdx <- left_join(md2, select(mx2, -Age, -Weight, -dev05), by="nid")
mdx$md_shh_l <- mdx$md_shh_R2_spot != 0
mdx$mx_shh_l <- mdx$mx_shh_R2_spot != 0
mdx3 <- subset(mdx, mdx$md_shh_l != mdx$mx_shh_l)
fisher.test(mdx$md_shh_l, mdx$mx_shh_l)
table(mdx$md_shh_l, mdx$mx_shh_l)
UM1_DUH_FVB_ReFT_compIGFL_2018 <- read.delim("~/Documents/dvpap/morphometric data/UM1_DUH_FVB_ReFT_compIGFL_2018.txt")
View(UM1_DUH_FVB_ReFT_compIGFL_2018)
um1 <- read.delim("UM1_DUH_FVB_ReFT_compIGFL_2018.txt")
View(um1)
um1 <- read.csv("UM1_DUH_FVB_ReFT_compIGFL_2018.csv")
View(um1)
colnames(um1)
um1$Strain
um1 <- read.csv("UM1_DUH_FVB_ReFT_compIGFL_2018.csv") %>%
filter(Strain %in% c("DUHi_IGFL", "FVB"))
View(um1)
um1 <- read.csv("UM1_DUH_FVB_ReFT_compIGFL_2018.csv") %>%
filter(Strain %in% c("DUH_IGFL", "FVB"))
View(um1)
install.packages("lawstat")
library("ggplot2")
library("reshape2")
library("dplyr")
library("tidyr")
library("Rmisc")
library("lawstat")
version
load("allns_data_plus.rdata")
load("allns_data_plus.rdata")
load("allns_data_plus.rdata")
View(ct1623.norm)
sinew <- read.csv("~/Documents/nstringfull/sinew.csv")
View(sinew)
ct1623.norm <- as.data.frame(ct1623.norm)
sinew <- read.csv("sinew.csv")
colnames(c1623.norm) <- sinew$sample[1:ncol(ct1623.norm)]
ct1623.hk <-  cbind(ct1617.hk, ct1819.hk, ct2021.hk, ct2223.hk)
t <- ct1011.raw
library(NanoStringNorm)
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(lubridate)
dirstart <-"~/nstringjul18/nstringfull/"
setwd(paste0(dirstart, "1011"))
ct1011.raw <- read.markup.RCC()
dirstart <-"~/nstringjul18/nstringfull/"
setwd(paste0(dirstart, "1011"))
getwd()
library(NanoStringNorm)
dirstart <-"~/Documents/nstringfull/"
setwd(paste0(dirstart, "1011"))
ct1011.raw <- read.markup.RCC()
library(NanoStringNorm)
dirstart <-"~/Documents/nstringfull/"
setwd(paste0(dirstart, "1617"))
ct1617.raw <- read.markup.RCC()
setwd(paste0(dirstart, "1819"))
ct1819.raw <- read.markup.RCC()
setwd(paste0(dirstart, "2021"))
ct2021.raw <- read.markup.RCC()
setwd(paste0(dirstart, "2223"))
ct2223.raw <- read.markup.RCC()
t <- ct1011.raw
t$x$CodeClass <- "Endogenous"
ctg1011.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
hknames <- rownames(ctg1011.matr)[210:214]
t <- ct1617.raw
t$x$CodeClass <- "Endogenous"
ct1617.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct1617.hk <- subset(ct1617.matr, rownames(ct1617.matr) %in% hknames)
t <- ct1819.raw
t$x$CodeClass <- "Endogenous"
ct1819.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct1819.hk <- subset(ct1819.matr, rownames(ct1819.matr) %in% hknames)
t <- ct2021.raw
t$x$CodeClass <- "Endogenous"
ct2021.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct2021.hk <- subset(ct2021.matr, rownames(ct2021.matr) %in% hknames)
t <- ct2223.raw
t$x$CodeClass <- "Endogenous"
ct2223.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct2223.hk <- subset(ct2223.matr, rownames(ct2223.matr) %in% hknames)
ct1623.hk <-  cbind(ct1617.hk, ct1819.hk, ct2021.hk, ct2223.hk)
rownames(ct1623.hk) <- rownames(ct1617.hk)
View(ct1623.hk)
mhk <- melt(ct1623.hk)
mhk <- reshape2::melt(ct1623.hk)
View(mhk)
#setwd("~/Documents/nstringjul18")
load(file="allns_data.rdata")
load("vardat.rdata")
load(file="qualitydat.rdata")
load(file="sampleinfo.rdata")
load(file="markerchoiceinfo.rdata")
load(file="gbmrsqopt.rdata")
load(file="lena.rdata")
load(file="gbmrmseopt.rdata")
View(ctall.hk)
mhk <- reshape2::melt(ct1623.hk)
ohk <- reshape2::melt(ctall.hk)
mhk <- reshape2::melt(ct1623.hk) %>%
as.data.frame() %>%
mutate(data = "new")
ohk <- reshape2::melt(ctall.hk)%>%
as.data.frame() %>%
mutate(data = "old")
hk <- rbind(mhk, ohk)
View(hk)
View(hk)
ggplot(hk, aes(x=Var1, y=value, colour=data))+ geom_point()
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
ggplot(hk, aes(x=Var1, y=value, colour=data))+ geom_point()
ggplot(hk, aes(x=Var1, y=value, colour=data))+ geom_point() + scale_y_log10()
ggplot(hk, aes(x=Var1, y=value, colour=data))+ geom_point(alpha=0.1) + scale_y_log10()
ggplot(hk, aes(x=Var1, y=value, colour=data))+ geom_point(alpha=0.1) + scale_y_log10() +facet_wrap(~data)
ggplot(hk, aes(x=data, y=value, colour=data))+ geom_point(alpha=0.1) + scale_y_log10() +facet_wrap(~Var1)
function (data = NULL, mapping = aes(), ..., environment = parent.frame())
ggplot(hk, aes(x=data, y=value, colour=data))+ geom_point(alpha=0.1, shape=95) + scale_y_log10() +facet_wrap(~Var1)
View(hk)
sampleinfob <- read.csv("siallplus.csv")
sampleinfob <- read.csv("sialplus.csv")
View(sampleinfob)
ctfull.norm <- rownames_to_column(as.data.frame(ctall.norm) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.norm)))
View(ctfull.norm)
ctfull.hk <- rownames_to_column(as.data.frame(ctall.hk) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.hk)))
ctfull.norm <- rownames_to_column(as.data.frame(ctall.norm) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.norm)))
ctfull.unnorm <- rownames_to_column(as.data.frame(ctall.unnorm) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.unnorm)))
ctfull.norm <- rownames_to_column(as.data.frame(ctall.norm) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.norm)))
#ctfull.unnorm <- rownames_to_column(as.data.frame(ctall.unnorm) )%>%
#  left_join(rownames_to_column(as.data.frame(ct1623.unnorm)))
ctfull.intonly <- rownames_to_column(as.data.frame(ctall.intonly) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.intonly)))
ct1617.intonly <- NanoStringNorm(x = ct1617.raw, anno = NA, CodeCount ='sum', Background ="mean",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct1819.intonly <- NanoStringNorm(x = ct1819.raw, anno = NA, CodeCount ='sum', Background ="mean",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct2021.intonly <- NanoStringNorm(x = ct2021.raw, anno = NA, CodeCount ='sum', Background ="mean",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct2223.intonly <- NanoStringNorm(x = ct2223.raw, anno = NA, CodeCount ='sum', Background ="mean",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct1623.intonly <- cbind(ct1617.intonly, ct1819.intonly, ct2021.intonly, ct2223.intonly)
rownames(ct1623.intonly) <- rownames(ct1617.intonly)
ct1617.intonly <- NanoStringNorm(x = ct1617.raw, anno = NA, CodeCount ='sum', Background ="mean",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct1819.intonly <- NanoStringNorm(x = ct1819.raw, anno = NA, CodeCount ='sum', Background ="mean",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct2021.intonly <- NanoStringNorm(x = ct2021.raw, anno = NA, CodeCount ='sum', Background ="mean",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct2223.intonly <- NanoStringNorm(x = ct2223.raw, anno = NA, CodeCount ='sum', Background ="mean",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct1623.intonly <- cbind(ct1617.intonly, ct1819.intonly, ct2021.intonly, ct2223.intonly)
rownames(ct1623.intonly) <- rownames(ct1617.intonly)
ctfull.intonly <- rownames_to_column(as.data.frame(ctall.intonly) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.intonly)))
ctfull.hk <- rownames_to_column(as.data.frame(ctall.hk) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.hk)))
sampleinfob <- read.csv("sialplus.csv")
colnames(ctfull.norm) <- sampleinfob$sample
colnames(ctfull.unnorm) <- sampleinfob$sample
colnames(ctfull.intonly) <- sampleinfob$sample
colnames(ctfull.hk) <- sampleinfob$sample
load(file="qualmod.rdata")
#setwd("~/Documents/nstringjul18")
load(file="allns_data.rdata")
load(file="sampleinfo.rdata")
load(file="models.rdata")
#setwd("~/Documents/nstringjul18")
load(file="allns_data.rdata")
load(file="sampleinfo.rdata")
#load(file="models.rdata")
load(file="vardat.rdata")
load(file="qualmod.rdata")
#setwd("~/Documents/nstringjul18")
load(file="allns_data.rdata")
load(file="sampleinfo.rdata")
#load(file="models.rdata")
load(file="vardat.rdata")
#load(file="qualmod.rdata")
mc <- melt(ctfull.norm/rowMeans(ctfull.norm, na.rm=T))
library(dplyr)
library(ggbiplot)
library(dplyr)
#library(ggbiplot)
library(tibble)
library(tidyr)
library(reshape2)
library(matrixStats)
install.packages("matrixStats")
library(dplyr)
#library(ggbiplot)
library(tibble)
library(tidyr)
library(reshape2)
library(matrixStats)
library(gtools)
library(GGally)
install.packages("GGally")
library(dplyr)
#library(ggbiplot)
library(tibble)
library(tidyr)
library(reshape2)
library(matrixStats)
library(gtools)
library(GGally)
library(philentropy)
install.packages("philentropy")
library(dplyr)
#library(ggbiplot)
library(tibble)
library(tidyr)
library(reshape2)
library(matrixStats)
library(gtools)
library(GGally)
library(philentropy)
library(ggrepel)
library(Rmisc)
mc <- melt(ctfull.norm/rowMeans(ctfull.norm, na.rm=T))
ctfull.norm
View(ctfull.norm)
mc <- melt(as.matrix(ctfull.norm)/rowMeans(as.matrix(ctfull.norm), na.rm=T))
mc <- melt(ctall.norm/rowMeans(ctall.norm, na.rm=T))
head(ctall.norm)
head(ctfull.norm)
?column_to_rownames
ctfull.norm <- rownames_to_column(as.data.frame(ctall.norm) )%>%
left_join(rownames_to_column(as.data.frame(ct1623.norm))) %>%
column_to_rownames(var="rowname")
View(ctfull.norm)
save.image("~/Documents/nstringfull/28-extra.rdata.RData")
