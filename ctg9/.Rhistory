#   "prem1" = "Pre-M1 spot length",
#   "totlen" = "Total dental lamina length"
# )
#
#
# variable_labeller <- function(variable,value){
#   return(variable_names[value])
# }
mbmeasures$meas2 <- "Post-M1 spot length"
mbmeasures$meas2[mbmeasures$measure == "prem1"] <- "Pre-M1 spot length"
mbmeasures$meas2[mbmeasures$measure == "totlen"] <- "Total dental lamina length"
mbmeasures$meas2 <- paste0(mbmeasures$Jaw, "\n", mbmeasures$meas2)
#
#
# variable_labeller(mbmeasures$measure)
# as.fac
#
# region_names <- levels(bmeasures$Jaw)
#
#
# variable_labeller2 <- function(variable,value){
#   if (variable=='measure') {
#   return(variable_names[value])
#   } else {
#     return(region_names)
#   }
# }
mbmeasures$meas3 <- factor(mbmeasures$meas2, levels=  c( "Upper molar\nPre-M1 spot length"        ,        "Upper molar\nPost-M1 spot length"  ,  "Upper molar\nTotal dental lamina length",     "Lower molar\nPre-M1 spot length" , "Lower molar\nPost-M1 spot length"    ,    "Lower molar\nTotal dental lamina length"))
ggplot(mbmeasures, aes(x=Strain, fill=Strain, y=length))+
geom_boxplot()+
theme_bw()+
scale_fill_manual(values=c("red3", "cornflower blue"))+
ylab("Length (μm)")+
facet_wrap(~meas3,  scales="free")
#ggsave(plot=p, device="png", filename = "boxmeas.png", width=8, height=6)
ggplot(mbmeasures, aes(x=Strain, fill=Strain, y=length))+
geom_boxplot()+
theme_bw()+
scale_fill_manual(values=c("red3", "cornflower blue"))+
ylab("Length (μm)")+
facet_wrap(~meas3,  scales="free")+
theme(legend.position = "none")
ggsave(plot=p, device="png", filename = "boxmeas.png", width=8, height=6)
ggsave(plot=p, device="png", filename = "boxmeas.png", width=7, height=6)
ggplot(mbmeasures, aes(x=Strain, fill=Strain, y=length))+
geom_boxplot()+
theme_bw()+
scale_fill_manual(values=c("red3", "cornflower blue"))+
ylab("Length (μm)")+
facet_wrap(~meas3,  scales="free")+
theme(legend.position = "none")
ggsave(plot=p, device="png", filename = "boxmeas.png", width=7, height=6)
#bmeasures$Jaw <- factor(bmeasures$Jaw, levels= c("Upper molar", "Lower molar"))
mbmeasures <- gather(bmeasures, key="measure", value="length", c("totlen",  "posm1", "prem1"))#, "spolen1", sholen",))
#
mbmeasures <- subset(mbmeasures, mbmeasures$Weight > 180 & mbmeasures$Weight <250)
# variable_names <- list(
#   "posm1" = "Post-M1 spot length" ,
#   "prem1" = "Pre-M1 spot length",
#   "totlen" = "Total dental lamina length"
# )
#
#
# variable_labeller <- function(variable,value){
#   return(variable_names[value])
# }
mbmeasures$meas2 <- "Post-M1 spot length"
mbmeasures$meas2[mbmeasures$measure == "prem1"] <- "Pre-M1 spot length"
mbmeasures$meas2[mbmeasures$measure == "totlen"] <- "Total dental lamina length"
mbmeasures$meas2 <- paste0(mbmeasures$Jaw, "\n", mbmeasures$meas2)
#
#
# variable_labeller(mbmeasures$measure)
# as.fac
#
# region_names <- levels(bmeasures$Jaw)
#
#
# variable_labeller2 <- function(variable,value){
#   if (variable=='measure') {
#   return(variable_names[value])
#   } else {
#     return(region_names)
#   }
# }
mbmeasures$meas3 <- factor(mbmeasures$meas2, levels=  c( "Upper molar\nPre-M1 spot length"        ,        "Upper molar\nPost-M1 spot length"  ,  "Upper molar\nTotal dental lamina length",     "Lower molar\nPre-M1 spot length" , "Lower molar\nPost-M1 spot length"    ,    "Lower molar\nTotal dental lamina length"))
p=ggplot(mbmeasures, aes(x=Strain, fill=Strain, y=length))+
geom_boxplot()+
theme_bw()+
scale_fill_manual(values=c("red3", "cornflower blue"))+
ylab("Length (μm)")+
facet_wrap(~meas3,  scales="free")+
theme(legend.position = "none")
ggsave(plot=p, device="png", filename = "boxmeas.png", width=7, height=6)
ggsave(plot=p, device="png", filename = "boxmeas.png", width=6, height=6)
p=ggplot(mbmeasures, aes(x=Strain, fill=Strain, y=length))+
geom_boxplot()+
theme_bw()+
scale_fill_manual(values=c("red3", "cornflower blue"))+
ylab("Length (μm)")+
facet_wrap(~meas3,  scales="free")+
theme(legend.position = "none")
ggsave(plot=p, device="pdf", filename = "boxmeas.pdf", width=6, height=6)
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
&   !(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))
))
md <- md[, lmdf2$in61 ==T & lmdf2$pvalovy < 0.05]
#md <- md[,colnames(md) %in% currbest$coefnames]
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- sample(1:nrow(md))[1:floor(4*(nrow(md)/5))]
trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
gbmagemodel <- train(
predage~.,
tuneLength = 4,
#  metric="RMSE",
#  importance = "permutation",
data = trdat,
method = "gbm",
tuneGrid=expand.grid(n.trees = (0:200)*50,
interaction.depth = c(1,2,3),
shrinkage = .001,
n.minobsinnode = c(6,8,10)),
trControl =  trainControl(method = 'cv',
number = 5,
summaryFunction=defaultSummary,
verboseIter = T)
)
plot(gbmagemodel)
#summary(currbest$finalModel)
mymodel <- gbmagemodel
#mymodel <- rfagemodel
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")&
!(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))))
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
(p=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age: GBM",
subtitle=paste0("RMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3))))#+  facet_wrap(~intrain)
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
&   !(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))
))
md <- md[, lmdf2$in61 ==T & lmdf2$pvalovy < 0.05]
#md <- md[,colnames(md) %in% currbest$coefnames]
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- sample(1:nrow(md))[1:floor(4*(nrow(md)/5))]
trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
gbmagemodel <- train(
predage~.,
tuneLength = 4,
#  metric="RMSE",
#  importance = "permutation",
data = trdat,
method = "gbm",
tuneGrid=expand.grid(n.trees = (0:200)*50,
interaction.depth = c(1,2,3),
shrinkage = .001,
n.minobsinnode = c(5,6,7)),
trControl =  trainControl(method = 'cv',
number = 7,
summaryFunction=defaultSummary,
verboseIter = T)
)
setwd("~/Documents/nstringjul18/1011")
setwd("~/nstringjul18/nstringfull/1011")
ct1011.raw <- read.markup.RCC()
library(NanoStringNorm)
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(lubridate)
setwd("~/nstringjul18/nstringfull/1011")
dirstart <-"~/nstringjul18/nstringfull/"
setwd(paste0(dirstart, "1011")
setwd(paste0(dirstart, "1011"))
setwd(paste0(dirstart, "1011"))
ct1011.raw <- read.markup.RCC()
ct1011.raw <- read.markup.RCC()
setwd("~/nstringjul18/nstringfull/1011")
ct1011.raw <- read.markup.RCC()
library(NanoStringNorm)
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(lubridate)
dirstart <-"~/nstringjul18/nstringfull/"
ct1011.raw <- read.markup.RCC()
library(NanoStringNorm)
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(lubridate)
dirstart <-"~/nstringjul18/nstringfull/"
ct1011.raw <- read.markup.RCC()
library(NanoStringNorm)
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(lubridate)
dirstart <-"~/nstringjul18/nstringfull/"
setwd(paste0(dirstart, "1011"))
ct1011.raw <- read.markup.RCC()
setwd(paste0(dirstart, "1011"))
ct1011.raw <- read.markup.RCC()
library(NanoStringNorm)
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(lubridate)
dirstart <-"~/nstringjul18/nstringfull/"
setwd(paste0(dirstart, "1011"))
ct1011.raw <- read.markup.RCC()
setwd(paste0(dirstart, "1213"))
ct1213.raw <- read.markup.RCC()
library(NanoStringNorm)
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(lubridate)
dirstart <-"~/nstringjul18/nstringfull/"
setwd(paste0(dirstart, "1011"))
ct1011.raw <- read.markup.RCC()
setwd(paste0(dirstart, "1213"))
ct1213.raw <- read.markup.RCC()
setwd(paste0(dirstart, "14"))
ct14.raw <- read.markup.RCC()
setwd(paste0(dirstart, "15"))
ct15.raw <- read.markup.RCC()
setwd(paste0(dirstart, "ctg5and6"))
ct5and6.raw <- read.markup.RCC()
setwd(paste0(dirstart, "ctg5hi"))
ct5and6hi.raw <- read.markup.RCC()
setwd(paste0(dirstart, "ctg7and8"))
ct7and8.raw <- read.markup.RCC()
setwd(paste0(dirstart, "ctg7and8hi"))
ct7and8hi.raw <- read.markup.RCC()
setwd(paste0(dirstart, "ctg3and4"))
ct3and4.raw <- read.markup.RCC()
setwd(paste0(dirstart, "ctg1and2"))
ct1and2.raw <- read.markup.RCC()
setwd(paste0(dirstart, "ctg9"))
ct9.raw <- read.markup.RCC()
t <- ct1011.raw
t$x$CodeClass <- "Endogenous"
ctg1011.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
hknames <- rownames(ctg1011.matr)[210:214]
ctg1011.hk <- subset(ctg1011.matr, rownames(ctg1011.matr) %in% hknames)
t <- ct1213.raw
t$x$CodeClass <- "Endogenous"
ctg1213.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg1213.hk <- subset(ctg1213.matr, rownames(ctg1213.matr) %in% hknames)
View(ctg1011.hk)
t <- ct1011.raw
t$x$CodeClass <- "Endogenous"
ctg1011.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
hknames <- rownames(ctg1011.matr)[210:214]
ctg1011.hk <- subset(ctg1011.matr, rownames(ctg1011.matr) %in% hknames)
t <- ct1213.raw
t$x$CodeClass <- "Endogenous"
ctg1213.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg1213.hk <- subset(ctg1213.matr, rownames(ctg1213.matr) %in% hknames)
t <- ct14.raw
t$x$CodeClass <- "Endogenous"
ctg14.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg14.hk <- subset(ctg14.matr, rownames(ctg14.matr) %in% hknames)
t <- ct15.raw
t$x$CodeClass <- "Endogenous"
ctg15.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg15.hk <- subset(ctg15.matr, rownames(ctg15.matr) %in% hknames)
t <- ct1and2.raw
t$x$CodeClass <- "Endogenous"
ctg1and2.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg1and2.hk <- subset(ctg1and2.matr, rownames(ctg1and2.matr) %in% hknames)
t <- ct3and4.raw
t$x$CodeClass <- "Endogenous"
ctg3and4.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg3and4.hk <- subset(ctg3and4.matr, rownames(ctg3and4.matr) %in% hknames)
t <- ct5and6hi.raw
t$x$CodeClass <- "Endogenous"
ctg5and6hi.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg5and6hi.hk <- subset(ctg5and6hi.matr, rownames(ctg5and6hi.matr) %in% hknames)
t <- ct7and8hi.raw
t$x$CodeClass <- "Endogenous"
ctg7and8hi.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg7and8hi.hk <- subset(ctg7and8hi.matr, rownames(ctg7and8hi.matr) %in% hknames)
t <- ct9.raw
t$x$CodeClass <- "Endogenous"
ctg9.matr <- NanoStringNorm(x = t, anno = NA, CodeCount ='none', Background ="none",OtherNorm = "none", round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg9.hk <- subset(ctg9.matr, rownames(ctg9.matr) %in% hknames)
View(ctg3and4.hk)
colnames(ctg1011.hk) <- colnames(ctg1011.norm)
ctg1011.norm <- NanoStringNorm(x = ct1011.raw, anno = NA, CodeCount ='sum', Background ="mean", SampleContent ='housekeeping.sum', round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg1213.norm <- NanoStringNorm(x = ct1213.raw, anno = NA, CodeCount ='sum', Background ="mean", SampleContent ='housekeeping.sum', round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg14.norm <- NanoStringNorm(x = ct14.raw, anno = NA, CodeCount ='sum', Background ="mean", SampleContent ='housekeeping.sum', round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ctg15.norm <- NanoStringNorm(x = ct15.raw, anno = NA, CodeCount ='sum', Background ="mean", SampleContent ='housekeeping.sum', round.values = FALSE, take.log = FALSE,return.matrix.of.endogenous.probes = TRUE);
ct1015.norm <- rownames_to_column(as.data.frame(cbind(ctg1011.norm,ctg1213.norm, ctg14.norm)) )%>%
left_join(rownames_to_column(as.data.frame(ctg15.norm)))
rownames(ct1015.norm) <- ct1015.norm$marker
ct1015.norm$rowname <- NULL
View(ctg1011.norm)
View(ctg1213.hk)
ctall.hk <- cbind(ctg1and2.hk,
ctg3and4.hk,
ctg5and6hi.hk,
ctg7and8hi.hk,
ctg9.hk,
ctg1011.hk,
ctg1213.hk,
ctg14.hk,
ctg15.hk)
colnames(ctall.hk) <- colnames(ctall.norm)
View(ctall.norm)
View(ctall.hk)
save(sampleinfo,ctall.norm,ctallgood.norm, codeset,geneinf,ctall.unnorm, ctall.intonly , ctall.hk, file="allns_data.rdata")
sampleinfo <- read.csv("siall.csv")
colnames(ctall.norm) <- sampleinfo$sample
colnames(ctall.unnorm) <- sampleinfo$sample
colnames(ctall.intonly) <- sampleinfo$sample
log <-rownames(ctall.norm) %in% minf$name[minf$chosenand ==T]
ctallgood.norm <- as.matrix(subset(ctall.norm, log))
#dates <- sampleinfo$cohdate[sampleinfo$cohdate != ""]
sampleinfo$cohdate <- parse_date_time(sampleinfo$cohdate,c('dmy'))
sampleinfo$wkage <- difftime( parse_date_time("07/07/18",c('dmy')), sampleinfo$cohdate, units=c("weeks"))
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(caret)
library(gtools)
powerTransform <- function(y, lambda1, lambda2 = NULL, method = "boxcox") {
boxcoxTrans <- function(x, lam1, lam2 = NULL) {
# if we set lambda2 to zero, it becomes the one parameter transformation
lam2 <- ifelse(is.null(lam2), 0, lam2)
if (lam1 == 0L) {
log(y + lam2)
} else {
(((y + lam2)^lam1) - 1) / lam1
}
}
switch(method
, boxcox = boxcoxTrans(y, lambda1, lambda2)
, tukey = y^lambda1
)
}
setwd("~/Documents/nstringjul18")
load(file="allns_data.rdata")
zklen <- read.csv("zk-age-len.csv")[2:3] %>%
mutate(prep="ZK")
lena <- sampleinfo %>%
filter(!is.na(wkage)) %>%
select(length, wkage, prep) %>%
rbind(zklen)
ggplot(lena, aes(y=length, x=wkage))+
geom_point()+
geom_smooth()+
theme_bw()+
scale_colour_brewer(palette="Set1")+
ggtitle("Age-length relationship in female Parhyale")+
ylab("Body length (mm)")+
xlab("Age (weeks)")
lena$wkage <- as.numeric(lena$wkage)
lena$loglen <- log(lena$length)
lena$lensq <- (lena$length)^2
m <- lm(wkage~length, data=lena)
summary(m)
(bc <- MASS::boxcox(length~wkage, data=lena))
(lambda <- bc$x[which.max(bc$y)])
# re-run with transformation
lena$bctranslen <- powerTransform(lena$length, lambda)
mnew <- lm(wkage~bctranslen, data=lena )
summary(mnew)
lena$linpred <- predict(m)
lena$linresid <- lena$wkage -lena$linpred
lena$bcpred <- predict(mnew)
lena$bcresid <- lena$wkage -lena$bcpred
mlena <- gather(lena, key="model", value="pred", c("bcpred", "linpred"))
ggplot(mlena, aes(x=pred, y=length, colour=model))+
geom_smooth(aes(y=length, x=wkage), colour="forest green")+
geom_line(size=1.5) +
theme_bw()+
geom_point(aes(x=wkage), colour="black")+
scale_colour_brewer(palette="Set1")+
xlab("Age (weeks)")+
ylab("Body length (mm)")+
ggtitle(label= "Linear regression age vs length",
subtitle=paste0("linear model R-squared: ", round(summary(m)$r.squared, 3),
"\nBox-cox transformed linear model R-squared: ", round(summary(mnew)$r.squared, 3)))#+ scale_colour_manual(values=c("cornflower blue", "red3"), name="Model", labels=c("Box-cox transformed", "Linear untransformed"))
mlena <- gather(lena, key="model", value="resid", c("bcresid", "linresid"))
ggplot(mlena, aes(y=resid, x=length, colour=model))+
geom_point()+
scale_colour_brewer(palette="Set1")+
theme_bw()+
facet_wrap(~model)
sampleinfo$predage <- NULL
preddf <-subset(sampleinfo, !is.na(sampleinfo$length))
preddf$bctranslen <- powerTransform(preddf$length, lambda)
preddf$predage <-  predict(mnew, newdata=preddf)
sampleinfo <- left_join(sampleinfo, dplyr::select(preddf, sample, predage), by="sample")
save(sampleinfo,ctall.norm,ctallgood.norm, codeset,geneinf,ctall.unnorm, ctall.intonly ,minf, file="allns_data.rdata")
save(sampleinfo,ctall.norm,ctallgood.norm, codeset,geneinf,ctall.unnorm, ctall.intonly ,ctall.hk, minf, file="allns_data.rdata")
library(dplyr)
library(ggbiplot)
library(tibble)
library(tidyr)
library(reshape2)
setwd("~/Documents/nstringjul18")
load(file="allns_data.rdata")
hkdat <- t(ctall.hk)
View(hkdat)
nhkdat <- ctall.hk/rowMeans(ctall.hk)
View(nhkdat)
View(nhkdat)
hkdat>0
hkdat <- t(ctall.hk)
nhkdat <- t(ctall.hk/rowMeans(ctall.hk))
hkdat$over1 <- rowSums(hkdat>0)
hkdat$over3 <- rowSums(hkdat>3)
hkdat>3
hkdat <- t(ctall.hk)
nhkdat <- t(ctall.hk/rowMeans(ctall.hk))
hkdat$over1 <- rowSums(hkdat>0)
hkdat$over3 <- rowSums(t(ctall.hk)>3)
hkdat$over5 <- rowSums(t(ctall.hk)>5)
hkdat$over10 <- rowSums(t(ctall.hk)>10)
hkdat <- as.data.frame(t(ctall.hk))
nhkdat <- t(ctall.hk/rowMeans(ctall.hk))
hkdat$over1 <- rowSums(hkdat>0)
hkdat$over3 <- rowSums(t(ctall.hk)>3)
hkdat$over5 <- rowSums(t(ctall.hk)>5)
hkdat$over10 <- rowSums(t(ctall.hk)>10)
View(hkdat)
save(hkdat, file="hkdat.rdata")
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
sampleinfo$ctg>2 &
sampleinfo$type %in% c("O", "Y", "M")
&   !(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))
))
md <- md[, colnames(md) %in% c(minf$name[minf$chosen==T], "predage")]
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- sample(1:nrow(md))[1:floor(4*(nrow(md)/5))]
#trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
View(trdat)
minf$in61
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
sampleinfo$ctg>2 &
sampleinfo$type %in% c("O", "Y", "M")
&   !(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))
))
md <- md[, colnames(md) %in% c(minf$name[minf$in61==T], "predage")]
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- sample(1:nrow(md))[1:floor(4*(nrow(md)/5))]
#trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
