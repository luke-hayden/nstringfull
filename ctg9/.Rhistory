!(sampleinfo$sample %in% c("O1a", "O1b", "YR1a", "YR1b" , "YR2a", "YR2b")))))
si <- subset(sampleinfo, sampleinfo$sample %in% colnames(md))
sl <- as.character(sampleinfo$sample[sampleinfo$sample %in% colnames(md)])
md$marker <- rownames(md)
mmd <- gather(as.data.frame(md), key="sample", value="expression", sl)
mmd$gp <- substr(mmd$sample, 1, nchar(mmd$sample)-1)
mmd$rep <- substr(mmd$sample,  nchar(mmd$sample), nchar(mmd$sample))
md <- select(mmd, -sample)
mmd2 <- left_join( select(dplyr::rename(filter(md, rep=="a"), expression_a =expression), -rep),
select(dplyr::rename(filter(md, rep=="b"), expression_b =expression), -rep),
by=c("marker", "gp") )
mmd2$percdiff <-100*(abs(mmd2$expression_a- mmd2$expression_b))/mmd2$expression_b
mmd2 <- subset(mmd2, mmd2$expression_a >0 & mmd2$expression_b >0)
polypercdiff <- lm(percdiff~poly(expression_b,4), data=mmd2)
modpercdiff <- lm(percdiff,~log(expression_b), data=mmd2)
View(mmd2)
modpercdiff <- lm(percdiff~log(expression_b), data=mmd2)
mmd2$predpdiff <- predict(modpercdiff)
ggplot(mmd2, aes(y=percdiff, x=expression_b))+
geom_point(alpha=0.1, colour="red2")+
stat_smooth()+
geom_line(aes(y=predpdiff), colour="green")+
geom_vline(xintercept=5, linetype=2)+
geom_vline(xintercept=3, linetype=2)+
geom_vline(xintercept=10, linetype=2)+
# geom_hex()+
theme_bw()+
scale_x_log10()+
xlab("Expression Replicate B")+
ylab("% Difference between replicates")+
ggtitle("How much expression needed for replicability? ", subtitle = "All genes, samples with replicates")
modpercdiff <- lm(percdiff~exp(expression_b), data=mmd2)
mmd2$predpdiff <- predict(modpercdiff)
mmd2 <- subset(mmd2, mmd2$expression_a >0 & mmd2$expression_b >0)
polypercdiff <- lm(percdiff~poly(expression_b,4), data=mmd2)
modpercdiff <- lm(percdiff~exp(expression_b), data=mmd2)
modpercdiff <- lm(percdiff~expression_b, data=mmd2)
mmd2$predpdiff <- predict(modpercdiff)
ggplot(mmd2, aes(y=percdiff, x=expression_b))+
geom_point(alpha=0.1, colour="red2")+
stat_smooth()+
geom_line(aes(y=predpdiff), colour="green")+
geom_vline(xintercept=5, linetype=2)+
geom_vline(xintercept=3, linetype=2)+
geom_vline(xintercept=10, linetype=2)+
# geom_hex()+
theme_bw()+
scale_x_log10()+
xlab("Expression Replicate B")+
ylab("% Difference between replicates")+
ggtitle("How much expression needed for replicability? ", subtitle = "All genes, samples with replicates")
modpercdiff <- loess(percdiff~expression_b, data=mmd2)
mmd2$predpdiff <- predict(modpercdiff)
ggplot(mmd2, aes(y=percdiff, x=expression_b))+
geom_point(alpha=0.1, colour="red2")+
stat_smooth()+
geom_line(aes(y=predpdiff), colour="green")+
geom_vline(xintercept=5, linetype=2)+
geom_vline(xintercept=3, linetype=2)+
geom_vline(xintercept=10, linetype=2)+
# geom_hex()+
theme_bw()+
scale_x_log10()+
xlab("Expression Replicate B")+
ylab("% Difference between replicates")+
ggtitle("How much expression needed for replicability? ", subtitle = "All genes, samples with replicates")
colnames(hkdat)
mhk
mhk <- hkdat[, 1:5]
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
View(mhk)
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
mhk$EOpred = predict(modpercdiff, newdata= hkdat[,2])
mhk$EQpred = predict(modpercdiff, newdata= hkdat[,3])
mhk$AQpred = predict(modpercdiff, newdata= hkdat[,4])
mhk$BSpred = predict(modpercdiff, newdata= hkdat[,5])
mhk <- hkdat[, 1:5]
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
mhk$EOpred = predict(modpercdiff, newdata= hkdat[,2])
mhk$EQpred = predict(modpercdiff, newdata= hkdat[,3])
mhk$AQpred = predict(modpercdiff, newdata= hkdat[,4])
mhk$BSpred = predict(modpercdiff, newdata= hkdat[,5])
View(mhk)
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
mhk$EOpred = predict(modpercdiff, newdata= hkdat[,2])
mhk$EQpred = predict(modpercdiff, newdata= hkdat[,3])
mhk$AQpred = predict(modpercdiff, newdata= hkdat[,4])
mhk$BSpred = predict(modpercdiff, newdata= hkdat[,5])
View(mhk)
ggplot(mmd2, aes(y=percdiff, x=expression_b))+
geom_point(alpha=0.1, colour="red2")+
stat_smooth()+
geom_line(aes(y=predpdiff), colour="green")+
geom_vline(xintercept=5, linetype=2)+
geom_vline(xintercept=3, linetype=2)+
geom_vline(xintercept=10, linetype=2)+
# geom_hex()+
theme_bw()+
scale_x_log10()+
xlab("Expression Replicate B")+
ylab("% Difference between replicates")+
ggtitle("How much expression needed for replicability? ", subtitle = "All genes, samples with replicates")
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <- 1000
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
mhk$EOpred = predict(modpercdiff, newdata= hkdat[,2])
mhk$EQpred = predict(modpercdiff, newdata= hkdat[,3])
mhk$AQpred = predict(modpercdiff, newdata= hkdat[,4])
mhk$BSpred = predict(modpercdiff, newdata= hkdat[,5])
View(mhk)
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <- 800
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
mhk$EOpred = predict(modpercdiff, newdata= hkdat[,2])
mhk$EQpred = predict(modpercdiff, newdata= hkdat[,3])
mhk$AQpred = predict(modpercdiff, newdata= hkdat[,4])
mhk$BSpred = predict(modpercdiff, newdata= hkdat[,5])
View(mhk)
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <- 700
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
mhk$EOpred = predict(modpercdiff, newdata= hkdat[,2])
mhk$EQpred = predict(modpercdiff, newdata= hkdat[,3])
mhk$AQpred = predict(modpercdiff, newdata= hkdat[,4])
mhk$BSpred = predict(modpercdiff, newdata= hkdat[,5])
View(mhk)
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 800] <- 800
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
mhk$EOpred = predict(modpercdiff, newdata= hkdat[,2])
mhk$EQpred = predict(modpercdiff, newdata= hkdat[,3])
mhk$AQpred = predict(modpercdiff, newdata= hkdat[,4])
mhk$BSpred = predict(modpercdiff, newdata= hkdat[,5])
View(mhk)
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 700] <-700
mhk$HLpred = predict(modpercdiff, newdata= hkdat[,1])
mhk$EOpred = predict(modpercdiff, newdata= hkdat[,2])
mhk$EQpred = predict(modpercdiff, newdata= hkdat[,3])
mhk$AQpred = predict(modpercdiff, newdata= hkdat[,4])
mhk$BSpred = predict(modpercdiff, newdata= hkdat[,5])
View(mhk)
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <-1000
mhk$HLpred = predict(modpercdiff, newdata= mhk[,1])
mhk$EOpred = predict(modpercdiff, newdata= mhk[,2])
mhk$EQpred = predict(modpercdiff, newdata= mhk[,3])
mhk$AQpred = predict(modpercdiff, newdata= mhk[,4])
mhk$BSpred = predict(modpercdiff, newdata= mhk[,5])
View(mhk)
mhk$meanpred <- rowMeans(mhk[,6:10])
View(mhk)
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <-1000
mhk$HLpred = predict(modpercdiff, newdata= mhk[,1])
mhk$EOpred = predict(modpercdiff, newdata= mhk[,2])
mhk$EQpred = predict(modpercdiff, newdata= mhk[,3])
mhk$AQpred = predict(modpercdiff, newdata= mhk[,4])
mhk$BSpred = predict(modpercdiff, newdata= mhk[,5])
mhk$meanpred <- rowMeans(mhk[,6:10])
mhk$sample <- rownames(mhk$sample)
mhk$sample <- factor(mhk$sample, levels=mhk$sample[order(mhk$meanpred)])
mhk$sample <- rownames(mhk$sample)
p=ggplot(mhkall, aes(y=meanpred,x=sample, fill=flag))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()
p
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <-1000
mhk$HLpred = predict(modpercdiff, newdata= mhk[,1])
mhk$EOpred = predict(modpercdiff, newdata= mhk[,2])
mhk$EQpred = predict(modpercdiff, newdata= mhk[,3])
mhk$AQpred = predict(modpercdiff, newdata= mhk[,4])
mhk$BSpred = predict(modpercdiff, newdata= mhk[,5])
mhk$meanpred <- rowMeans(mhk[,6:10])
mhk$sample <- rownames(mhk$sample)
mhk$sample <- factor(mhk$sample, levels=mhk$sample[order(mhk$meanpred)])
View(mhk)
mhk$sample <- rownames(mhk$sample)
View(mhk)
mhk$flag <- mhk$sample %in% sampleinfo$sample[sampleinfo$flag ==T]
mhk$sample <- rownames(mhk)
mhk$sample <- factor(mhk$sample, levels=mhk$sample[order(mhk$meanpred)])
mhk$flag <- mhk$sample %in% sampleinfo$sample[sampleinfo$flag ==T]
ggplot(mhkall, aes(y=meanpred,x=sample, fill=flag))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <-1000
mhk$HLpred = predict(modpercdiff, newdata= mhk[,1])
mhk$EOpred = predict(modpercdiff, newdata= mhk[,2])
mhk$EQpred = predict(modpercdiff, newdata= mhk[,3])
mhk$AQpred = predict(modpercdiff, newdata= mhk[,4])
mhk$BSpred = predict(modpercdiff, newdata= mhk[,5])
mhk$meanpred <- rowMeans(mhk[,6:10])
mhk$sample <- rownames(mhk)
mhk$sample <- factor(mhk$sample, levels=mhk$sample[order(mhk$meanpred)])
mhk$flag <- mhk$sample %in% sampleinfo$sample[sampleinfo$flag ==T]
ggplot(mhk, aes(y=meanpred,x=sample, fill=flag))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <-1000
mhk$HLpred = predict(modpercdiff, newdata= mhk[,1])
mhk$EOpred = predict(modpercdiff, newdata= mhk[,2])
mhk$EQpred = predict(modpercdiff, newdata= mhk[,3])
mhk$AQpred = predict(modpercdiff, newdata= mhk[,4])
mhk$BSpred = predict(modpercdiff, newdata= mhk[,5])
mhk$meanpred <- rowMeans(mhk[,6:10])
mhk$sample <- rownames(mhk)
mhk$sample <- factor(mhk$sample, levels=mhk$sample[order(mhk$meanpred)])
mhk$flag <- mhk$sample %in% sampleinfo$sample[sampleinfo$flag ==T]
ggplot(mhk, aes(y=meanpred,x=sample, fill=flag))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
ylab("Predicted replicability (from mean of 5 housekeeping genes)")+
scale_fill_brewer(palette="Set1"))+
mhk <- hkdat[, 1:5]
mhk[mhk < 0.1] <- 1 #LOESS needs values of at least 1
mhk[mhk > 1000] <-1000
mhk$HLpred = predict(modpercdiff, newdata= mhk[,1])
mhk$EOpred = predict(modpercdiff, newdata= mhk[,2])
mhk$EQpred = predict(modpercdiff, newdata= mhk[,3])
mhk$AQpred = predict(modpercdiff, newdata= mhk[,4])
mhk$BSpred = predict(modpercdiff, newdata= mhk[,5])
mhk$meanpred <- rowMeans(mhk[,6:10])
mhk$sample <- rownames(mhk)
mhk$sample <- factor(mhk$sample, levels=mhk$sample[order(mhk$meanpred)])
mhk$flag <- mhk$sample %in% sampleinfo$sample[sampleinfo$flag ==T]
ggplot(mhk, aes(y=meanpred,x=sample, fill=flag))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
ylab("Predicted replicability (from mean of 5 housekeeping genes)")+
scale_fill_brewer(palette="Set1")+
ggtitle("Sample trustworthiness")
#Random forest
md <- as.data.frame(subset(t(ctall.geo.norm), sampleinfo$sex == "F" &
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
&   !(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))
))
md <- md[, lmdf2$in61 ==T & lmdf2$pvalovy < 0.05]
md <- as.data.frame(subset(t(ctall.geo.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
&   !(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))
))
#md <- md[,minf$chosenand ==T]
md <- md[, lmdf2$in61 ==T & lmdf2$pvalovy < 0.05]
#md <- md[,colnames(md) %in% currbest$coefnames]
#
# md <- as.data.frame(subset(t(ctall.norm), sik$sex == "F" &
#
#                  sik$prep== "Luke"&
#                  sik$exp %in% c("Size-age", "cohorts", "OvY") &
#                  sik$ctg>2 &
#                 sik$codeset == "phaw_1" &
#                  sik$type %in% c("O", "Y", "M")&
#                   sik$good
# ))
#
# md <- md[, lmdf2$in61 ==T & lmdf2$pvalovy < 0.05]
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- sample(1:nrow(md))[1:floor(4*(nrow(md)/5))]
trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
rfagemodel <- train(
predage~.,
tuneLength = 4,
metric="RMSE",
num.trees=2000,
importance = "permutation",
data = trdat, method = "ranger",
tuneGrid=expand.grid(mtry=c(10:20),
splitrule=c("extratrees", "variance"),
min.node.size=c(1:10)),
trControl = trainControl(method = "cv", number = 40, verboseIter = T)
)
plot(rfagemodel)
#rfagemodel$trainingData
#summary(currbest$finalModel)
mymodel <- currbest
mymodel <- rfagemodel
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")&
!(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))))
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
(p=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0("RMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3))))#+  facet_wrap(~intrain)
#ggsave(plot=p,height=5,width=6,dpi=200, filename=paste("modeltrte.pdf"), useDingbats=FALSE, limitsize = FALSE)
bm <- rfagemodel$trainingData
colnames(bm) %in% colnames(cb)
rownames(bm) %in% rownames(cb)
mbm <- melt(bm)
View(mbm)
mbm <- melt(bm, id.vars=c(".outcome"))
mcb <- melt(cb, id.vars=c(".outcome"))
both <- left_join(mbm, mcb, by=c(".outcome", "variable"))
View(both)
ggplot(both, aes(value.x, value.y))+geom_point()+stat_smooth()
ggplot(both, aes(value.x, value.y))+geom_point()+stat_smooth()+scale_x_log10()+scale_y_log10()
mbm <- melt(rownames_to_column(bm))
View(mbm)
mbm <- melt(rownames_to_column(bm), id.vars=c(".outcome")))
mbm <- melt(rownames_to_column(bm), id.vars=c(".outcome"))
View(mbm)
cb <- melt(rownames_to_column(cb), id.vars=c(".outcome"))
mcb <- melt(rownames_to_column(cb), id.vars=c(".outcome"))
View(mcb)
View(cb)
mcb <- cb
View(mcb)
cb <- currbest$trainingData
cb <- currbest$trainingData
bm <- rfagemodel$trainingData
mcb <- melt(rownames_to_column(cb), id.vars=c(".outcome", "rowname"))
mbm <- melt(rownames_to_column(bm), id.vars=c(".outcome", "rowname"))
both <- left_join(mbm, mcb, by=c("rowname", "ariable"))
both <- left_join(mbm, mcb, by=c("rowname", "variable"))
View(both)
both$.outcome.x == both$.outcome.y
sum(both$.outcome.x == both$.outcome.y)
ggplot(both, aes(value.x, value.y))+geom_point()+stat_smooth()+scale_x_log10()+scale_y_log10()
normcomp <- melt(rownames_to_column(ctall.geo.norm))
colnames(normcomp) <- c("marker", "sample", "geo")
#names(normcomp)[names(normcomp) == 'value'] <- 'geo'
normcomp <- left_join(normcomp, melt(rownames_to_column(as.data.frame(ctall.norm))), by=c("marker" ="rowname", "sample" = "variable") )
names(normcomp)[names(normcomp) == 'value'] <- 'sum'
normcomp$flag <- normcomp$sample %in% sampleinfo$sample[sampleinfo$flag==T]
# normcomp$logeo <- log10(normcomp$geo)
# normcomp$logsum <- log10(normcomp$sum)
normcompnon0 <- subset(normcomp, normcomp$geo >0 & normcomp$sum >0)
sglm <- lm(log(geo)~log(sum), data=normcompnon0)
ggplot(normcompnon0, aes(x=geo, y=sum, label=sample ))+
geom_point(aes(colour=flag), alpha=0.1)+
xlab()
normcomp <- melt(rownames_to_column(ctall.geo.norm))
colnames(normcomp) <- c("marker", "sample", "geo")
#names(normcomp)[names(normcomp) == 'value'] <- 'geo'
normcomp <- left_join(normcomp, melt(rownames_to_column(as.data.frame(ctall.norm))), by=c("marker" ="rowname", "sample" = "variable") )
names(normcomp)[names(normcomp) == 'value'] <- 'sum'
normcomp$flag <- normcomp$sample %in% sampleinfo$sample[sampleinfo$flag==T]
# normcomp$logeo <- log10(normcomp$geo)
# normcomp$logsum <- log10(normcomp$sum)
normcompnon0 <- subset(normcomp, normcomp$geo >0 & normcomp$sum >0)
sglm <- lm(log(geo)~log(sum), data=normcompnon0)
ggplot(normcompnon0, aes(x=geo, y=sum, label=sample ))+
geom_point(aes(colour=flag), alpha=0.1)+
scale_y_log10()+
scale_x_log10()+
theme_bw()+
scale_colour_brewer(palette="Set1")+
#  geom_text(aes(colour=flag))+
geom_smooth(method="lm")+
ggtitle("Comparing methods of normalising via Housekeeping genes",
subtitle= paste0("R2 of correlation: ", round(summary(sglm)$r.squared, 4)))+
xlab("Using geometric mean of Housekeeping genes")+
ylab("Using sum of Housekeeping genes")
save(ctall.norm,ctallgood.norm, codeset,geneinf,ctall.unnorm,ctall.geo.norm, ctall.intonly ,ctall.hk, file="allns_data.rdata")
georfmodel <- rfagemodel
save(currbest, georfmodel,file="models.rdata")
#setwd("~/Documents/nstringjul18")
load(file="allns_data.rdata")
load(file="sampleinfo.rdata")
load(file="models.rdata")
mymodel <- georfmodel
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")&
!(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))))
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
pgeo=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0("RMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3)))#+  facet_wrap(~intrain)
#ggsave(plot=p,height=5,width=6,dpi=200, filename=paste("modeltrte.pdf"), useDingbats=FALSE, limitsize = FALSE)
mymodel <- currbest
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")&
!(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))))
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
psum=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age \nNormalisation by sum",
subtitle=paste0("RMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3)))#+  facet_wrap(~intrain)
#ggsave(plot=p,height=5,width=6,dpi=200, filename=paste("modeltrte.pdf"), useDingbats=FALSE, limitsize = FALSE)
mymodel <- georfmodel
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")&
!(sampleinfo$sample %in% c("T","C", "U", "LFPD", "O1a", "SFPA", "LFIB","LFIA","AF", "Coh8"))))
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
pgeo=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age \nGeometric normalisation",
subtitle=paste0("RMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3)))#+  facet_wrap(~intrain)
#ggsave(plot=p,height=5,width=6,dpi=200, filename=paste("modeltrte.pdf"), useDingbats=FALSE, limitsize = FALSE)
multiplot(psum, pgeo)
library("Rmisc", lib.loc="~/R/win-library/3.4")
multiplot(psum, pgeo)
?multiplot
multiplot(psum, pgeo, cols=2)
