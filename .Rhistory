tedat <- md[-trainchoice,]
currmodel <- train(
predage~.,
tuneLength = 4,
metric="RMSE",
#  num.trees=2000,
# importance = "permutation",
data = trdat, method = "lm"
#tuneGrid=expand.grid(mtry=c(10:20),
#                     splitrule=c("extratrees", "variance"),
#                    min.node.size=c(1:10)),
#  trControl = trainControl(method = "cv", number = 1, verboseIter = T)
)
modellist[[i]] <- currmodel
}
str(modellist)
plotlist <- list()
for (i in 1:length(modellist)){
mymodel <- modellist[i]
maindata <-  as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
maindata <- subset(maindata, rownames(maindata)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
plotlist[i]=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0(length(mymodel$coefnames),
" markers in model \nRMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3)))
}
mymodel <- modellist[1]
maindata <-  as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
maindata <- subset(maindata, rownames(maindata)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
modellist <- list()
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[, lmdf2$in61 ==T ]
for (i in 1:length(cutoffs)){
print(i)
md <- as.data.frame(maindata[, colnames(maindata) %in% vrimprf$name[vrimprf$pos <= cutoffs[i]]])
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
currmodel <- train(
predage~.,
tuneLength = 4,
metric="RMSE",
#  num.trees=2000,
# importance = "permutation",
data = trdat, method = "lm"
#tuneGrid=expand.grid(mtry=c(10:20),
#                     splitrule=c("extratrees", "variance"),
#                    min.node.size=c(1:10)),
#  trControl = trainControl(method = "cv", number = 1, verboseIter = T)
)
modellist[[i]] <- currmodel
}
modellist <- list()
maindata <-  as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
maindata <- subset(maindata, rownames(maindata)%in% qualsum$sample[qualsum$good])
maindata <- maindata[, lmdf2$in61 ==T ]
for (i in 1:length(cutoffs)){
print(i)
md <- as.data.frame(maindata[, colnames(maindata) %in% vrimprf$name[vrimprf$pos <= cutoffs[i]]])
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
currmodel <- train(
predage~.,
tuneLength = 4,
metric="RMSE",
#  num.trees=2000,
# importance = "permutation",
data = trdat, method = "lm"
#tuneGrid=expand.grid(mtry=c(10:20),
#                     splitrule=c("extratrees", "variance"),
#                    min.node.size=c(1:10)),
#  trControl = trainControl(method = "cv", number = 1, verboseIter = T)
)
modellist[[i]] <- currmodel
}
plotlist <- list()
for (i in 1:length(modellist)){
mymodel <- modellist[i]
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
plotlist[i]=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0(length(mymodel$coefnames),
" markers in model \nRMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3)))
}
mymodel <- modellist[1]
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
mymodel
summary(mymodel)
mymodel
str(mymodel)
names(mymodel$coefficients)
mymodel$coefficients
#Random forest
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[, lmdf2$in61 ==T]
#md <- md[,colnames(md) %in% currbest$coefnames]
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- sample(1:nrow(md))[1:floor(4*(nrow(md)/5))]
trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <-   md[!(rownames(md) %in% rownames(trdat)),]
rfagemodel61 <- train(
predage~.,
tuneLength = 4,
metric="RMSE",
num.trees=2000,
importance = "permutation",
data = trdat, method = "ranger",
tuneGrid=expand.grid(mtry=c(10:20),
splitrule=c("extratrees", "variance"),
min.node.size=c(1:10)),
trControl = trainControl(method = "cv", number = 40, verboseIter = T)
)
mymodel <- rfagemodel61
#mymodel <- rfagemodel
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
sampleinfo$ctg>2 &
sampleinfo$type %in% c("O", "Y", "M")
)
)
md <- md[, lmdf2$in61 ==T]
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
(p=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0(length(mymodel$coefnames),
" markers in model \nRMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3))))#+  facet_wrap(~intrain)
#ggsave(plot=p,height=5,width=6,dpi=200, filename=paste("modeltrte.pdf"), useDingbats=FALSE, limitsize = FALSE)
mymodel <- rfagemodel61
#mymodel <- rfagemodel
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
sampleinfo$ctg>2 &
sampleinfo$type %in% c("O", "Y", "M")
)
)
md <- md[, lmdf2$in61 ==T]
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
(p=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0(length(mymodel$coefnames),
" markers in model \nRMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3))))#+  facet_wrap(~intrain)
#ggsave(plot=p,height=5,width=6,dpi=200, filename=paste("modeltrte.pdf"), useDingbats=FALSE, limitsize = FALSE)
mymodel <- rfagemodel61
mymodel <- currbest
vrimprf <-varImp(mymodel)$importance %>%
rownames_to_column(var="name")
vrimprf$sname <- substr(vrimprf$name, 1,2)
vrimprf$sname <- factor(vrimprf$sname, levels=vrimprf$sname[order(vrimprf$Overall, decreasing=T)])
vrimprf$pos <- match(vrimprf$sname, levels(vrimprf$sname))
cutoffs <- c(55,50,45,40,35,30,25,20,15,10,5)
vrimprf$groupin <- 5*ceiling(vrimprf$pos/5)
vrimprf$groupin[vrimprf$groupin %in% c(60, 65)] <- 61
vrimprf$groupin <- as.factor(vrimprf$groupin)
(p=ggplot(vrimprf, aes(x=pos, y=Overall, label=sname, fill=groupin))+
theme_bw()+
geom_vline(xintercept=cutoffs+0.5, linetype=2)+
geom_text(size=2.3, angle=60, y=-3)+
scale_fill_brewer(palette="Set3")+
geom_bar(stat="identity")+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
xlab("Marker")+
ylab("Contribution to model")+
ggtitle("Marker contributions", subtitle= paste0("random forest model built with ", length(mymodel$coefnames), " markers"))
)
save(rfagemodel61, file="progmodels.rdata")
modellist <- list()
maindata <-  as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
maindata <- subset(maindata, rownames(maindata)%in% qualsum$sample[qualsum$good])
maindata <- maindata[, lmdf2$in61 ==T ]
for (i in 1:length(cutoffs)){
print(i)
md <- as.data.frame(maindata[, colnames(maindata) %in% vrimprf$name[vrimprf$pos <= cutoffs[i]]])
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
currmodel <- train(
predage~.,
tuneLength = 4,
metric="RMSE",
#  num.trees=2000,
# importance = "permutation",
data = trdat, method = "lm"
#tuneGrid=expand.grid(mtry=c(10:20),
#                     splitrule=c("extratrees", "variance"),
#                    min.node.size=c(1:10)),
#  trControl = trainControl(method = "cv", number = 1, verboseIter = T)
)
modellist[[i]] <- currmodel
}
plotlist <- list()
for (i in 1:length(modellist)){
mymodel <- modellist[i]
mymodel <- modellist[1]
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
plotlist[i]=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0(length(mymodel$coefnames),
" markers in model \nRMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3)))
}
plotlist <- list()
for (i in 1:length(modellist)){
mymodel <- modellist[i]
#mymodel <- modellist[1]
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
plotlist[i]=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0(length(mymodel$coefnames),
" markers in model \nRMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3)))
}
mymodel <- rfagemodel61
#mymodel <- currbest
vrimprf <-varImp(mymodel)$importance %>%
rownames_to_column(var="name")
vrimprf$sname <- substr(vrimprf$name, 1,2)
vrimprf$sname <- factor(vrimprf$sname, levels=vrimprf$sname[order(vrimprf$Overall, decreasing=T)])
vrimprf$pos <- match(vrimprf$sname, levels(vrimprf$sname))
cutoffs <- c(55,50,45,40,35,30,25,20,15,10,5)
vrimprf$groupin <- 5*ceiling(vrimprf$pos/5)
vrimprf$groupin[vrimprf$groupin %in% c(60, 65)] <- 61
vrimprf$groupin <- as.factor(vrimprf$groupin)
(p=ggplot(vrimprf, aes(x=pos, y=Overall, label=sname, fill=groupin))+
theme_bw()+
geom_vline(xintercept=cutoffs+0.5, linetype=2)+
geom_text(size=2.3, angle=60, y=-3)+
scale_fill_brewer(palette="Set3")+
geom_bar(stat="identity")+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
xlab("Marker")+
ylab("Contribution to model")+
ggtitle("Marker contributions", subtitle= paste0("random forest model built with ", length(mymodel$coefnames), " markers"))
)
save(rfagemodel61, file="progmodels.rdata")
modellist <- list()
maindata <-  as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
maindata <- subset(maindata, rownames(maindata)%in% qualsum$sample[qualsum$good])
maindata <- maindata[, lmdf2$in61 ==T ]
for (i in 1:length(cutoffs)){
print(i)
md <- as.data.frame(maindata[, colnames(maindata) %in% vrimprf$name[vrimprf$pos <= cutoffs[i]]])
md$sample <- rownames(md)
md <- left_join(md, select(sampleinfo, sample, predage), by="sample") %>%
filter(!(is.na(predage))) %>%
column_to_rownames(var="sample")
trainchoice <- rownames(md) %in% rownames(currbest$trainingData)
trdat <- md[trainchoice,]
tedat <- md[-trainchoice,]
currmodel <- train(
predage~.,
tuneLength = 4,
metric="RMSE",
#  num.trees=2000,
# importance = "permutation",
data = trdat, method = "lm"
#tuneGrid=expand.grid(mtry=c(10:20),
#                     splitrule=c("extratrees", "variance"),
#                    min.node.size=c(1:10)),
#  trControl = trainControl(method = "cv", number = 1, verboseIter = T)
)
modellist[[i]] <- currmodel
}
plotlist <- list()
for (i in 1:length(modellist)){
mymodel <- modellist[i]
#mymodel <- modellist[1]
md <- as.data.frame(subset(t(ctall.norm), sampleinfo$sex == "F" &
#               sampleinfo$qual == "ok"&
sampleinfo$prep== "Luke"&
sampleinfo$exp %in% c("Size-age", "cohorts", "OvY") &
#                sampleinfo$ctg>2 &
sampleinfo$codeset == "phaw_1" &
sampleinfo$type %in% c("O", "Y", "M")
))
md <- subset(md, rownames(md)%in% qualsum$sample[qualsum$good])
md <- md[,colnames(md) %in% mymodel$coefnames]
md$rfagepred <- predict(mymodel, newdata=md)
md$intrain <- rownames(md) %in% rownames(mymodel$trainingData)
md <- md %>%
rownames_to_column(var="sample") %>%
left_join(sampleinfo,  by="sample")
md <- subset(md, !(is.na(md$predage)))
RMSEtr <- sqrt(mean( (md$rfagepred[md$intrain == T] - md$predage[md$intrain == T])   ^2))
RMSEte <- sqrt(mean( (md$rfagepred[md$intrain == F] - md$predage[md$intrain == F])   ^2))
plotlist[i]=ggplot(md, aes(x=predage, y=rfagepred,colour=intrain))+
geom_point()+
xlab("Age (weeks) from body length") +
ylab("Age (weeks) from marker gene expression (random forest model)")+
geom_smooth(method="lm", colour="black")+
theme_bw()+
scale_colour_manual(values=c("cornflower blue", "red3"), name="Data partition", labels=c("Test", "Training"))+
geom_text_repel(aes(label=sample), size=2.5)+
ggtitle("Using Marker gene expression to predict age",
subtitle=paste0(length(mymodel$coefnames),
" markers in model \nRMSE in training data: ", round(RMSEtr,3),
"\nRMSE in test data: ", round(RMSEte,3)))
}
